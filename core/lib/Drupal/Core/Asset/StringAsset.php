<?php

/**
 * @file
 * Contains \Drupal\Core\Asset\StringAsset.
 */

namespace Drupal\Core\Asset;

use Assetic\Filter\FilterInterface;
use Drupal\Component\Utility\Crypt;
use Drupal\Core\Asset\BaseAsset;
use Drupal\Core\Asset\Metadata\AssetMetadataInterface;

class StringAsset extends BaseAsset {

  /**
   * The string id of this asset.
   *
   * This is generated by hashing the content of the asset when the object is
   * first created. The id does NOT change if the content is changed later.
   *
   * @var string
   */
  protected $id;

  protected $lastModified = FALSE; // TODO this is terrible

  /**
   * Creates a new string asset object.
   *
   * @param \Drupal\Core\Asset\Metadata\AssetMetadataInterface $metadata
   *   The metadata object for the new string asset.
   * @param string $content
   *   The content of the new string asset.
   * @param \Assetic\Filter\FilterInterface[] $filters
   *   (optional) An array of FilterInterface objects to apply to this asset.
   *
   * @throws \InvalidArgumentException
   *   Thrown if a non-string is provided as content.
   */
  public function __construct(AssetMetadataInterface $metadata, $content, $filters = array()) {
    if (!is_string($content)) {
      throw new \InvalidArgumentException('StringAsset requires a string for its content.');
    }

    $this->id= empty($content) ? Crypt::randomBytes(32) : hash('sha256', $content);
    $this->setContent($content);

    parent::__construct($metadata, $filters);
  }

  /**
   * {@inheritdoc}
   */
  public function id() {
    return $this->id;
  }

  /**
   * {@inheritdoc}
   */
  public function setLastModified($last_modified) {
    $this->lastModified = $last_modified;
  }

  /**
   * {@inheritdoc}
   */
  public function getLastModified() {
    return $this->lastModified;
  }

  /**
   * {@inheritdoc}
   */
  public function load(FilterInterface $additionalFilter = NULL) {
    $this->doLoad($this->getContent(), $additionalFilter);
  }

}
